unit uVST;

interface

uses
  Winapi.Windows
  , Winapi.Messages
  , System.SysUtils
  , System.StrUtils
  , System.Variants
  , System.Classes
  , Vcl.Graphics
  , Vcl.Controls
  , Vcl.Forms
  , Vcl.Dialogs
  , MemTableDataEh
  , Data.DB
  , MemTableEh
  , VirtualTrees
  , System.Actions
  , Vcl.ActnList
  ;

type

  PTreeData = ^TTreeData;

  TTreeData= packed record
    ID: Integer;
    ParentID: Integer;
    Mkb_code: string;
    Mkb_caption: string;
  end;

  TForm1 = class(TForm)
    VST: TVirtualStringTree;
    mds: TMemTableEh;
    ActList: TActionList;
    ActFillMDS: TAction;
    ActFillTree: TAction;
    procedure ActFillMDSExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure VSTFreeNode(Sender: TBaseVirtualTree; Node: PVirtualNode);
    procedure VSTGetNodeDataSize(Sender: TBaseVirtualTree; var NodeDataSize: Integer);
    procedure VSTGetText(Sender: TBaseVirtualTree; Node: PVirtualNode; Column: TColumnIndex; TextType: TVSTTextType;
      var CellText: string);
    procedure ActFillTreeExecute(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

const
  DataFile = 'c:\proj\test_delphi\delphi_vtv\base\mkb10.sql';
  ExcludeStr1 = 'INSERT INTO';
  ExcludeStr2 = 'REINSERT (';
var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.ActFillMDSExecute(Sender: TObject);
const
  a = '(''';
  b = ' ';
  c = ''', ';
  d = ', ';
  e = ');';
var
  SL: TStringList;
  i: Integer;
  s, ss: string;
  k,m: Integer;
begin
  SL:= TStringList.Create;
  try
    SL.LoadFromFile(DataFile,TEncoding.UTF8);

    if mds.Active
      then mds.EmptyTable
      else mds.Active:= True;

    for i := 0 to Pred(SL.Count) do
    begin
      if (Pos(ExcludeStr1,SL.Strings[i]) = 0) then
        if (Pos(ExcludeStr2,SL.Strings[i]) = 0) then Continue;

      mds.Append;

      k:= PosEx(a,SL.Strings[i]) + System.Length(a);
      m:= PosEx(b,SL.Strings[i],k);
      mds.FieldByName('MKB_CODE').AsString:= Copy(SL.Strings[i],k,m-k);

      k:= m + System.Length(b);
      m:= PosEx(c,SL.Strings[i],k);
      mds.FieldByName('MKB_CAPTION').AsString:= Copy(SL.Strings[i],k,m-k);

      k:= m + System.Length(c);
      m:= PosEx(d,SL.Strings[i],k);
      mds.FieldByName('TREE_ID').AsString:= Copy(SL.Strings[i],k,m-k);

      k:= m + System.Length(d);
      m:= PosEx(e,SL.Strings[i],k);
      mds.FieldByName('VALUES_UID').AsString:= Copy(SL.Strings[i],k,m-k);
    end;

//    if not mds.IsEmpty then mds.Post;
    if not (mds.State in [dsBrowse]) then mds.Post;

  finally
    FreeAndNil(SL);
  end;
end;

procedure TForm1.ActFillTreeExecute(Sender: TObject);
var
  rNode: PVirtualNode;
  chNode: PVirtualNode;
  Data: PTreeData;
  id, parent_id: Integer;
begin
  rNode:= nil;
  chNode:= nil;
  Data:= nil;
  id:= -1;
  parent_id:= -1;

  VST.BeginUpdate;
  try
    VST.Clear;
    mds.Filter:= 'TREE_ID = 0';
    mds.Filtered:= True;

    mds.First;

    while not mds.Eof do
    begin
      rNode:= VST.AddChild(nil);
      Data:= VST.GetNodeData(rNode);
      Data.ID:= mds.FieldByName('VALUES_UID').AsInteger;
      Data.ParentID:= mds.FieldByName('TREE_ID').AsInteger;
      Data.Mkb_code:= mds.FieldByName('MKB_CODE').AsString;
      Data.Mkb_caption:= mds.FieldByName('MKB_CAPTION').AsString;

      mds.Next;
    end;

  finally
    VST.EndUpdate;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
  i: Integer;
begin
  with mds do
  begin
    FieldDefs.Add('MKB_CODE', ftString, 10);
    FieldDefs.Add('MKB_CAPTION', ftString, 260);
    FieldDefs.Add('TREE_ID', ftInteger);
    FieldDefs.Add('VALUES_UID', ftInteger);

    CreateDataSet;
    Filtered := False;
    Active := False;
  end;

  with VST do
  begin
    TreeOptions.AutoOptions:= TreeOptions.AutoOptions
                              + [toAutoDropExpand, toAutoExpand,
                                  toAutoScrollOnExpand, toAutoSort,
                                  toAutoTristateTracking, toAutoDeleteMovedNodes,
                                  toAutoChangeScale];

    Header.Options:= Header.Options
                      + [hoAutoResize, hoColumnResize, {hoOwnerDraw,} hoShowHint, hoShowSortGlyphs, hoVisible]
                      - [hoDrag];
    Header.Columns.Clear;

    Header.Columns.Add;
    i:= 0;

    with Header.Columns.Items[i] do
    begin
      CheckType:= ctNone;
      MinWidth:= 50;
      CaptionAlignment:= taCenter;
      Text:= 'ID';
    end;

    Header.Columns.Add;
    Inc(i);

    with Header.Columns.Items[i] do
    begin
      CheckType:= ctNone;
      MinWidth:= 50;
      CaptionAlignment:= taCenter;
      Caption:= 'Parent ID';
    end;

    Header.Columns.Add;
    Inc(i);

    with Header.Columns.Items[i] do
    begin
      CheckType:= ctNone;
      MinWidth:= 50;
      CaptionAlignment:= taCenter;
      Caption:= 'Код МКБ';
    end;

    Header.Columns.Add;
    Inc(i);

    with Header.Columns.Items[i] do
    begin
      CheckType:= ctNone;
      MinWidth:= 200;
      CaptionAlignment:= taLeftJustify;
      Caption:= 'Название МКБ';
    end;


  end;
end;

procedure TForm1.FormShow(Sender: TObject);
begin
  ActFillMDSExecute(Sender);
  ActFillTreeExecute(Sender);
end;

procedure TForm1.VSTFreeNode(Sender: TBaseVirtualTree; Node: PVirtualNode);
begin
  if Assigned(Sender.GetNodeData(Node)) then
  begin
    PTreeData(Sender.GetNodeData(Node))^.ID:= -1;
    PTreeData(Sender.GetNodeData(Node))^.ParentID:= -1;
    PTreeData(Sender.GetNodeData(Node))^.Mkb_code:= '';
    PTreeData(Sender.GetNodeData(Node))^.Mkb_caption:= '';
  end;
end;

procedure TForm1.VSTGetNodeDataSize(Sender: TBaseVirtualTree; var NodeDataSize: Integer);
begin
  NodeDataSize:= SizeOf(TTreeData);
end;

procedure TForm1.VSTGetText(Sender: TBaseVirtualTree; Node: PVirtualNode; Column: TColumnIndex; TextType: TVSTTextType; var CellText: string);
begin
  case Column of
    0: CellText:= IntToStr(PTreeData(Sender.GetNodeData(Node))^.ID);
    1: CellText:= IntToStr(PTreeData(Sender.GetNodeData(Node))^.ParentID);
    2: CellText:= PTreeData(Sender.GetNodeData(Node))^.Mkb_code;
    3: CellText:= PTreeData(Sender.GetNodeData(Node))^.Mkb_caption;
  end;
end;

end.
